package com.teamsixnus.scaleup.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ActivityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityAllPropertiesEquals(Activity expected, Activity actual) {
        assertActivityAutoGeneratedPropertiesEquals(expected, actual);
        assertActivityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityAllUpdatablePropertiesEquals(Activity expected, Activity actual) {
        assertActivityUpdatableFieldsEquals(expected, actual);
        assertActivityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityAutoGeneratedPropertiesEquals(Activity expected, Activity actual) {
        assertThat(expected)
            .as("Verify Activity auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityUpdatableFieldsEquals(Activity expected, Activity actual) {
        assertThat(expected)
            .as("Verify Activity relevant properties")
            .satisfies(e -> assertThat(e.getActivityTime()).as("check activityTime").isEqualTo(actual.getActivityTime()))
            .satisfies(e -> assertThat(e.getDuration()).as("check duration").isEqualTo(actual.getDuration()))
            .satisfies(e -> assertThat(e.getVenue()).as("check venue").isEqualTo(actual.getVenue()))
            .satisfies(e -> assertThat(e.getDetails()).as("check details").isEqualTo(actual.getDetails()))
            .satisfies(e -> assertThat(e.getActivityName()).as("check activityName").isEqualTo(actual.getActivityName()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityUpdatableRelationshipsEquals(Activity expected, Activity actual) {
        assertThat(expected)
            .as("Verify Activity relationships")
            .satisfies(e -> assertThat(e.getCreatorProfile()).as("check creatorProfile").isEqualTo(actual.getCreatorProfile()))
            .satisfies(e -> assertThat(e.getSkill()).as("check skill").isEqualTo(actual.getSkill()));
    }
}
